class TemplateFormatter{get templateChar(){return"x"}get nonTemplateValueRegExp(){return/\D/g}get template(){return this._template}set template(newValue){if("string"!=typeof newValue)throw"Template must be a string";this._prefixes[0]=newValue.split(this.templateChar)[0],this._template=newValue.substring(newValue.indexOf(this.templateChar)),this._templateForHiddenInput=this._template}get currentPrefix(){return-1==this._prefixIndex?"":this._prefixes[this._prefixIndex]}set prefixes(newValue){if(!Array.isArray(newValue)&&0==newValue.length)throw"prefixes must be a non empty Array!";if(!newValue.every(t=>"string"==typeof t))throw"Possible prefix must be a string!";this._prefixes=[this._prefixes[0]].concat(newValue)}_initEvents(){this._inputElement.addEventListener("keyup",this.onKeyUp.bind(this)),this._inputElement.addEventListener("focus",this.onFocus.bind(this)),this._inputElement.addEventListener("blur",this.onBlur.bind(this))}_initHiddenInput(templateForHidden){this._clonedInput=this._inputElement.cloneNode(!0),this._inputElement.parentElement.insertBefore(this._clonedInput,this._inputElement),this._inputElement.setAttribute("name",""),this._clonedInput.style.display="none",this._clonedInput.setAttribute("id",""),this._templateForHiddenInput=templateForHidden||this.template}constructor(inputElement,props){if(!inputElement)throw"Input element must specified";if("string"==typeof inputElement){if(this._inputElement=document.getElementById(inputElement),!this._inputElement)throw"There is no element with id: "+inputElement}else{if("object"!=typeof inputElement||"[object HTMLInputElement]"!=Object.prototype.toString.call(inputElement))throw"Unknown input element type";this._inputElement=inputElement}if(this._prefixIndex=0,this._prefixes=[],!props.template)throw"Template must be specified";this.template=props.template,props.prefixes&&(this._prefixes=this._prefixes.concat(props.prefixes)),props.showPrefixOnFocus&&(this.showPrefixOnFocus=!0),props.createHiddenInput&&this._initHiddenInput(props.templateForHidden),this._initEvents()}getUniqueMaxVal(arr){let maxVal=-1,maxIndx=-1,isValUnique=!0;for(let i=0;i<arr.length;i++)arr[i]>maxVal?(maxVal=arr[i],maxIndx=i,isValUnique=!0):maxVal==arr[i]&&(isValUnique=!1);return{value:maxVal,index:isValUnique?maxIndx:-1}}calcPrefixMatchCount(textToMatch){let clearedText=textToMatch.replace(this.nonTemplateValueRegExp,""),matchCount=[];return this._prefixes.map(t=>t.replace(this.nonTemplateValueRegExp,"")).forEach(v=>{let matches=0;for(let i=0;i<Math.min(v.length,clearedText.length)&&v[i]==clearedText[i];i++)matches++;matchCount.push(matches)}),matchCount}getSuitablePrefixIndex(text){if(!text||!text.trim())return-1;let uniqueVal=this.getUniqueMaxVal(this.calcPrefixMatchCount(text));return 0===uniqueVal.value?0:uniqueVal.index}_updatePossiblePrefix(newEnteredText){(1!=this._prefixes.length||this._prefixes[0])&&(this._prefixIndex=this.getSuitablePrefixIndex(newEnteredText),this._inputElement.dispatchEvent(new CustomEvent("tf.p.onchange",{bubbles:!0,detail:this._prefixIndex})))}pushPostfixIfNeeded(text){let startOfPostfix=this.template.lastIndexOf(this.templateChar);return this.currentPrefix.length+startOfPostfix+1==text.length?text+this.template.slice(startOfPostfix+1):text}removePrefix(textWithPrefix){let currentPrefix=this.currentPrefix.replace(this.nonTemplateValueRegExp,""),prefixEnd=0;for(;textWithPrefix[prefixEnd]&&currentPrefix[prefixEnd]===textWithPrefix[prefixEnd];)prefixEnd++;return prefixEnd>=textWithPrefix.length?"":textWithPrefix.substring(prefixEnd)}formatText(textToFormat){let textWithTemplateVals=this.removePrefix(textToFormat.replace(this.nonTemplateValueRegExp,"")),formattedText="";for(let templateIndex=0,textIndex=0;templateIndex<this.template.length&&textIndex<textWithTemplateVals.length;templateIndex++)formattedText+=this.template[templateIndex]!=this.templateChar?this.template[templateIndex]:textWithTemplateVals[textIndex++];return this.pushPostfixIfNeeded(this.currentPrefix+formattedText)}_getFirstTemplateMismatch(text){let prefixIndx=this.getSuitablePrefixIndex(text),fullTemplate=this._prefixes[prefixIndx]+this.template;for(let i=0;i<Math.min(text.length,fullTemplate.length);i++)if(text[i]!==fullTemplate[i]&&(fullTemplate[i]!==this.templateChar||this.nonTemplateValueRegExp.test(text[i])))return i;return text.length!=fullTemplate.length?Math.min(text.length,fullTemplate.length):-1}isPartiallyMatchTemplate(text){if(text){let firstMismatch=this._getFirstTemplateMismatch(text);return firstMismatch>=text.length||-1==firstMismatch}return!1}isMatchTemplate(text){return text&&-1==this._getFirstTemplateMismatch(text)}_processNewInput(newInputText,wasCharDeleted){return wasCharDeleted&&this.isPartiallyMatchTemplate(newInputText)?newInputText:(this._updatePossiblePrefix(newInputText),this.formatText(newInputText))}onKeyUp(event){this._inputElement.value=this._processNewInput(event.target.value,8===event.keyCode||46===event.keyCode),this._clonedInput&&(this._clonedInput.value=this._inputElement.value.replace(this.nonTemplateValueRegExp,""))}onFocus(event){this.showPrefixOnFocus&&this._inputElement.dispatchEvent(new Event("keyup"))}onBlur(event){this.currentPrefix==this._inputElement.value&&(this._inputElement.value="")}}module.exports=TemplateFormatter;